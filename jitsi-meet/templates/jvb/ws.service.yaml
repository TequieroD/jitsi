{{- if and .Values.jvb.enabled .Values.jvb.websockets.service.enabled }}
{{- range $shardName, $shardConfig := .Values.global.shards }}
{{- $fullShardName := include "jitsi-meet.jvb.fullShardName" (dict "root" $ "shardName" $shardName) -}}
{{- with $ }}
{{- $maxReplicas := .Values.jvb.replicaCount -}}
{{- if .Values.jvb.autoscaling.enabled }}
{{- $maxReplicas = .Values.jvb.autoscaling.maxReplicas -}}
{{- end }}
{{- range $replica := (untilStep 0 (int $maxReplicas) 1) }}
{{- with $ }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $fullShardName }}-jvb-ws-{{ $replica }}
  labels:
    jitsi/component: jvb
    jitsi/shard: "{{ $shardName }}"
    jitsi/replica: "{{ $replica }}"
    {{- include "jitsi-meet.jvb.labels" . | nindent 4 }}
  {{- with .Values.jvb.websockets.service.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  type: {{ .Values.jvb.websockets.service.type }}
  ports:
    {{- $setNodePorts := (or (eq .Values.jvb.websockets.service.type "NodePort") (eq .Values.jvb.websockets.service.type "LoadBalancer")) }}
    {{- range $key, $value := .Values.jvb.websockets.service.ports }}
    - port: {{ $value }}
      targetPort: {{ $key }}
      protocol: TCP
      name: {{ $key }}
      {{- if (and $setNodePorts (not (empty (index $shardConfig.jvbWebsocketBasePorts $key)))) }}
      nodePort: {{ add (index $shardConfig.jvbWebsocketBasePorts $key) $replica }}
      {{- end }}
    {{- end }}
  selector:
    {{- include "jitsi-meet.jvb.selectorLabels" . | nindent 4 }}
    jitsi/component: jvb
    jitsi/shard: "{{ $shardName }}"
    statefulset.kubernetes.io/pod-name: "{{ $fullShardName }}-jvb-{{ $replica }}"
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
